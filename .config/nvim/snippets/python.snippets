snippet #! "shebang" b
    #!/usr/bin/env python3
snippet #!2 "shebang" b
    #!/usr/bin/env python2
    # -*- coding: utf-8 -*-
snippet imp "import" b
    import ${0:module}
snippet from "import from" b
    from ${1:package} import ${0:module}

snippet sk "skip unittests" b
    @unittest.skip(${1:skip_reason})

snippet wh "while" b
    while $1:
        ${0:${VISUAL}}

snippet dowh "do while" b
    while True:
        ${1}
        if $0:
            break

snippet with "with" b
    with ${1:expr} as ${2:var}:
        ${0:${VISUAL}}

snippet awith "async with" b
    async with ${1:expr} as ${2:var}:
        ${0:${VISUAL}}

snippet cl "new class w/ init" b
    class ${1:ClassName}(${2:object}):
        """${3:docstring for $1}"""
        def __init__(self, ${4:arg}):
            ${5:super($1, self).__init__()}
            self.$4 = $4
            ${0:${VISUAL}}
snippet cla "class" b
    class ${1:class_name}:
        """${0:description}"""

snippet clai "class instance" b
    class ${1:class_name}:
        """${2:description}"""
        def __init__(self, ${3:args}):
            ${0:${VISUAL}}

snippet def "function" b
    def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
        """${3:docstring for $1}"""
        ${0:${VISUAL}}
snippet adef "async function" b
    async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
        """${3:docstring for $1}"""
        ${0:${VISUAL}}

snippet defi "init method" b
    def __init__(self, ${1:args}):
        ${0:${VISUAL}}
snippet defm "method" b
    def ${1:mname}(self, ${2:arg}):
        ${0:${VISUAL}}
snippet adefm "async method" b
    async def ${1:mname}(self, ${2:arg}):
        ${0:${VISUAL}}

snippet defp "property" b
    @property
    def ${1:foo}(self) -> ${2:type}:
        """${3:doc}"""
        return self._$1

    @$1.setter
    def $1(self, value: $2):
        self._$1 = value

snippet if "if" b
    if $1:
        ${0:${VISUAL}}
snippet ife "if/else" b
    if $1:
        ${2:${VISUAL}}
    else:
        $0

snippet el "else" b
    else:
        ${0:${VISUAL}}
snippet ei "elif" b
    elif $1:
        ${0:${VISUAL}}

snippet mat "match" b
    match ${1:expression}:
        case ${2:pattern_1}:
            ${3:pass}
        case ${4:pattern_2}:
            ${5:pass}

snippet for "for" b
    for ${1:item} in ${2:items}:
        ${0:${VISUAL}}

snippet ld "lambda" b
    ${1:var} = lambda ${2:vars} : ${0:action}

snippet ret "return" b
    return $0
snippet . "get attribute" b
    self.
snippet sa "set attribute" b
    self.$1 = $0

snippet try "try/except" b
    try:
        ${1:${VISUAL}}
    except ${2:Exception} as ${3:e}:
        ${0:raise $3}
snippet trye "try/except/else" b
    try:
        ${1:${VISUAL}}
    except ${2:Exception} as ${3:e}:
        ${4:raise $3}
    else:
        $0
snippet tryf "try/except/finally" b
    try:
        ${1:${VISUAL}}
    except ${2:Exception} as ${3:e}:
        ${4:raise $3}
    finally:
        $0
snippet tryef "try/except/else/finally" b
    try:
        ${1:${VISUAL}}
    except ${2:Exception} as ${3:e}:
        ${4:raise $3}
    else:
        ${5}
    finally:
        $0

snippet ifmain "if main" b
    if __name__ == '__main__':
        ${0:main()}

snippet br "breakpoint" b
    breakpoint()

snippet " "doc comment" b
    """${0:doc}
    """

snippet a= "assert equal" b
    self.assertEqual(${0}, ${1})
snippet test "test" b
    def test_${1:description}(${2:`indent('.') ? 'self' : ''`}):
        ${0:${VISUAL}}
snippet testcase "test case" b
    class ${1:ExampleCase}(unittest.TestCase):

        def test_${2:description}(self):
            ${0:${VISUAL}}

snippet getopt "get options" b
    try:
        # Short option syntax: "hv:"
        # Long option syntax: "help" or "verbose="
        opts, args = getopt.getopt(sys.argv[1:], "${1:short_options}", [${2:long_options}])

    except getopt.GetoptError, err:
        # Print debug info
        print str(err)
        ${3:error_action}

    for option, argument in opts:
        if option in ("-h", "--help"):
            $0
        elif option in ("-v", "--verbose"):
            verbose = argument

snippet kwg "assign keyword args to attribute" b
    self.$1 = kwargs.get('$1', ${2:None})
snippet lkwg "assign keyword args" b
    ${1:var_name} = kwargs.get('$1', ${2:None})
snippet args "args" b
    *args${1:,}${0}
snippet kwargs "keyword args" b
    **kwargs${1:,}${0}
snippet akw "args, keyword args" b
    *args, **kwargs${1:,}${0}

snippet lcp "list comprehension" b
    [${1} for ${2} in ${3:${VISUAL}}]${0}

snippet dcp "dict comprehension" b
    {${1}: ${2} for ${3} in ${4:${VISUAL}}}${0}

snippet scp "set comprehension" b
    {${1} for ${2} in ${3:${VISUAL}}}${0}

snippet pr "print" b
    print($0)
snippet prs "print string" b
    print("$0")
snippet prf "format print" b
    print(f"$0")
snippet fpr "print to file" b
    print($0, file=${1:sys.stderr})
snippet fprs "print string to file" b
    print("$0", file=${1:sys.stderr})
snippet fprf "format print to file" b
    print(f"$0", file=${1:sys.stderr})
