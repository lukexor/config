snippet main "main" b
    int main(int argc, char *argv[]) {
        ${0:${VISUAL}}
    }
snippet mainn "main void" b
    int main(void) {
        ${0:${VISUAL}}
    }
snippet inc "include" b
    #include <${1:stdio}.h>
snippet inch "include header"
    #include "${1:`vim_snippets#Filename("$1.h")`}"
snippet ndef "ifndef" b
    #ifndef $1
        ${0:${VISUAL}}
    #endif /* ifndef $1 */
snippet def "define" b
    #define
snippet ifdef "ifdef" b
    #ifdef $1
        ${0:${VISUAL}}
    #endif
snippet #if "if" b
    #if $1
        ${0:${VISUAL}}
    #endif
snippet once "once" b
    #ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}

    #define $1

    ${0:${VISUAL}}

    #endif /* end of include guard: $1 */
snippet if "if" b
    if ($1) {
        ${0:${VISUAL}}
    }
snippet ife "if/else" b
    if ($1) {
        ${2:${VISUAL}}
    } else {
        $0
    }
snippet el "else" b
    else {
        ${0:${VISUAL}}
    }
snippet elif "else if" b
    else if ($1) {
        ${0:${VISUAL}}
    }
snippet t "ternary"
    $1 ? $2 : $0
snippet sw "switch" b
    switch ($1) {
        case $3:
            $4
            break;
        $0
        default:
            $2
    }
snippet case "case" b
    case $1:
        ${0:${VISUAL}}
        break;
snippet ret "return" b
    return $0;
snippet ex "exit" b
    exit($0);
snippet for "for" b
    for (int ${1:i} = 0; $1 < ${2:count}; ++$1) {
        ${0:${VISUAL}}
    }
snippet wh "while" b
    while ($1) {
        ${0:${VISUAL}}
    }
snippet do "do/while" b
    do {
        ${0:${VISUAL}}
    } while ($1);
snippet fn "function" b
    ${1:void} $2($3)
    {
        ${0:${VISUAL}}
    }
snippet fnd "function declaration" b
    ${1:void} $2($3);
snippet td "typedef" b
    typedef ${1:int} ${2:Type};
snippet st "struct" b
    struct ${1:`vim_snippets#Filename('$1', 'name')`} {
        ${0:${VISUAL}}
    }$2;

snippet enum "enum" b
    enum $1 { $0 };
snippet pr "format print"
    printf("${1:%s}\n"$2);
snippet fpr "format print to file"
    fprintf(${1:stderr}, "${2:%s}\n"$3);
snippet as "assert"
    assert($1);
snippet anl "assert not null"
    assert(${1:ptr} != NULL);

snippet mlc "malloc"
    ${1:ptr} = (${2:type}*) malloc(sizeof($2));

snippet clc "calloc"
    ${1:ptr} = (${2:type}*) calloc(${3:size}, sizeof($2));

snippet rlc "realloc"
    ${1:ptr} = realloc($1, ${2:size} * sizeof(${3:type}));

snippet mlcd "malloc declaration"
    ${1:type} ${2:ptr} = ($1*) malloc(sizeof($1));

snippet clcd "calloc declaration"
    ${1:type} ${2:ptr} = ($1*) calloc(${3:size}, sizeof($1));

snippet fre "free"
    free(${1:ptr});

snippet todo "// TODO"
    // TODO: $1
